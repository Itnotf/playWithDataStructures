package BinarySearchTree

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestBinarySearchTree(t *testing.T) {
	BST := NewBST[int]()
	assert.Equal(t, 0, BST.GetSize())
	assert.Equal(t, true, BST.IsEmpty())
	BST.Add(5)
	BST.Add(1)
	BST.Add(3)
	BST.Add(2)
	BST.Add(6)
	BST.Add(7)
	assert.Equal(t, true, BST.Contains(7))
	assert.Equal(t, true, BST.Contains(1))
	assert.Equal(t, false, BST.Contains(8))
	assert.Equal(t, 6, BST.GetSize())
	assert.Equal(t, false, BST.IsEmpty())
	BST.PreOrder()
	BST.InOrder()
	BST.PostOrder()
	assert.Equal(t, 7, BST.Maximum())
	assert.Equal(t, 1, BST.Minimum())

	BST.InOrder()
	BST.Remove(5)
	BST.Remove(7)
	BST.Remove(6)
	BST.Remove(2)
	BST.InOrder()
	BST.Add(5)
	BST.Add(7)
	BST.Add(6)
	BST.Add(2)
	BST.InOrder()
	//assert.Equal(t, 1, BST.Floor(2))
	assert.Equal(t, 3, BST.Floor(3))
	assert.Equal(t, 3, BST.Floor(4))
	assert.Equal(t, 5, BST.Floor(5))
	assert.Equal(t, 6, BST.Floor(6))
	assert.Equal(t, 7, BST.Floor(7))
	assert.Equal(t, 7, BST.Floor(8))
	assert.Equal(t, 1, BST.Ceil(1))
	assert.Equal(t, 2, BST.Ceil(2))
	assert.Equal(t, 3, BST.Ceil(3))
	assert.Equal(t, 5, BST.Ceil(4))
	assert.Equal(t, 5, BST.Ceil(5))
	assert.Equal(t, 2, BST.Rank(2))
	assert.Panics(t, func() { BST.Rank(100) })
	assert.Panics(t, func() { BST.Select(100) })
	assert.Equal(t, 7, BST.Select(6))
	assert.Equal(t, 1, BST.Select(1))
	assert.Equal(t, 2, BST.Select(2))
	assert.Equal(t, 3, BST.Select(3))
	assert.Equal(t, 5, BST.Select(4))
	assert.Equal(t, 6, BST.Select(5))
	assert.Equal(t, 1, BST.RemoveMin())
	assert.Equal(t, 7, BST.RemoveMax())
	assert.Equal(t, 2, BST.RemoveMin())
	assert.Equal(t, 6, BST.RemoveMax())
	assert.Equal(t, 5, BST.RemoveMax())
	assert.Equal(t, 3, BST.RemoveMax())
	assert.Panics(t, func() { BST.Remove(1) })
	assert.Panics(t, func() { BST.RemoveMax() })
	assert.Panics(t, func() { BST.RemoveMin() })
	assert.Panics(t, func() { BST.Maximum() })
	assert.Panics(t, func() { BST.Minimum() })

}
